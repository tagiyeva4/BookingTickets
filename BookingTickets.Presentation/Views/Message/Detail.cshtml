@using System.Security.Claims
@model Chat
@{
    Layout = null;
    string? userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Chat Detail</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            background-color: #f0f2f5;
            font-family: 'Arial', sans-serif;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .chat-container {
            background: white;
            width: 350px;
            height: 600px;
            border-radius: 10px;
            box-shadow: 0 8px 24px rgba(0,0,0,0.1);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .chat-header {
            background-color: #4CAF50;
            color: white;
            padding: 15px;
            font-size: 18px;
            font-weight: bold;
            text-align: center;
        }

        .chat-body {
            flex: 1;
            padding: 20px 15px;
            overflow-y: auto;
            background-color: #f9f9f9;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .message {
            max-width: 70%;
            padding: 10px 15px;
            border-radius: 20px;
            font-size: 14px;
            line-height: 1.4;
        }

            .message.received {
                background-color: #e0e0e0;
                align-self: flex-start;
            }

            .message.sent {
                background-color: #dcf8c6;
                align-self: flex-end;
            }

        .chat-footer {
            padding: 10px;
            background-color: #eee;
            display: flex;
            gap: 10px;
        }

            .chat-footer input {
                flex: 1;
                padding: 10px;
                border: none;
                border-radius: 20px;
                font-size: 14px;
            }

            .chat-footer button {
                padding: 10px 15px;
                background-color: #4CAF50;
                color: white;
                border: none;
                border-radius: 20px;
                font-size: 14px;
                cursor: pointer;
            }

                .chat-footer button:hover {
                    background-color: #45a049;
                }
        /* Add this at the end of your CSS */
        .message.typing {
            font-style: italic;
            color: gray;
            background: transparent;
            border: none;
            box-shadow: none;
        }

    </style>
</head>
<body>

    <div class="chat-container">
        <div class="chat-header">
            @Model.Name
        </div>

        <div class="chat-body" id="chat-body">
            @foreach (var message in Model.Messages)
            {
                <div class="message @(message.SenderId == userId ? "sent" : "received")">
                    @message.Text
                </div>
            }
        </div>

        <div class="chat-footer">
            <input id="chat-input" type="text" placeholder="Type a message..." class="form-control">
            <button id="send-button" class="btn btn-success">Send</button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const chatInput = document.getElementById('chat-input');
        const sendButton = document.getElementById('send-button');
        const chatBody = document.getElementById('chat-body');
        const chatId = @Model.Id;
        const userId = '@userId';

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        connection.start().catch(err => console.error(err.toString()));

        sendButton.addEventListener('click', sendMessage);
        chatInput.addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        async function sendMessage() {
            const text = chatInput.value.trim();
            if (text === '') return;

            const csrfToken = document.querySelector('meta[name="csrf-token"]').content;

            // Frontend yeni mesajı dərhal göstər
            addMessage(text, 'sent');
            chatInput.value = '';

            await fetch('/Message/SendMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': csrfToken
                },
                body: `chatId=${chatId}&text=${encodeURIComponent(text)}`
            });
        }

        connection.on("ReceiveMessage", function (message) {
            if (message.SenderId !== userId) {
                addMessage(message.Text, 'received');
            }
        });

        function addMessage(text, type) {
            const div = document.createElement('div');
            div.className = `message ${type}`;
            div.textContent = text;
            chatBody.appendChild(div);
            chatBody.scrollTop = chatBody.scrollHeight;
        }
    </script>

</body>
</html>












