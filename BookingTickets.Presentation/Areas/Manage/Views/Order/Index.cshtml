@using BookingTickets.Business.Helpers
@using BookingTickets.Core.Entities
@using BookingTickets.Core.Enums
@model PaginatedList<Order>

@{
    int count = ((Model.CurrentPage - 1) * 10) + 1;
    decimal totalCompletedSales = Model
        .Where(x => x.OrderStatus == OrderStatus.Completed)
        .Sum(x => x.TotalPrice);
}

<div class="container mt-5">
    <div class="card shadow rounded-4">
        <!-- Total Sales Card -->
        <div class="card mt-4 shadow rounded-4 border-0 bg-light">
            <div class="card-body text-center">
                <h5 class="fw-bold text-success">
                    Total Completed Sales (Current Page): @totalCompletedSales.ToString("0.00") ₼
                </h5>
            </div>
        </div>

        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h4 class="mb-0">Sales Overview</h4>
        </div>

        <div class="card-body">
            <table class="table table-hover table-bordered text-center align-middle">
                <thead class="table-dark">
                    <tr>
                        <th>#</th>
                        <th>Customer</th>
                        <th>Tickets</th>
                        <th>Total Price</th>
                        <th>Status</th>
                        <th>Order Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in Model)
                    {
                        <tr>
                            <td>@(count++)</td>

                            <td>@(order.AppUser?.UserName ?? "Guest")</td>

                            <td class="text-start">
                                @{
                                    int totalCount = 0;
                                }
                                @foreach (var item in order.OrderItems)
                                {
                                    <div>
                                        @item.SeatDescription (x @item.Count)
                                    </div>
                                    totalCount += item.Count;
                                }
                                <div class="mt-2 fw-bold">
                                    Total: @totalCount ticket(s)
                                </div>
                            </td>

                            <td>@order.TotalPrice.ToString("0.00") ₼</td>

                            <td>
                                @if (order.OrderStatus == OrderStatus.Pending)
                                {
                                    <span class="badge bg-warning text-dark">Pending</span>
                                }
                                else if (order.OrderStatus == OrderStatus.Completed)
                                {
                                    <span class="badge bg-success">Completed</span>
                                }
                                else if (order.OrderStatus == OrderStatus.Cancelled)
                                {
                                    <span class="badge bg-danger">Cancelled</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">@order.OrderStatus</span>
                                }
                            </td>

                            <td>@order.CreatedDate?.ToString("dd MMM yyyy HH:mm")</td>
                        </tr>
                    }
                </tbody>
            </table>

            <nav aria-label="Page navigation" class="mt-4">
                <ul class="pagination justify-content-center">
                    @if (Model.HasPrevious)
                    {
                        <li class="page-item">
                            <a class="page-link" asp-action="Index" asp-route-page="@(Model.CurrentPage - 1)">Previous</a>
                        </li>
                    }

                    @for (int i = Model.Start; i <= Model.End; i++)
                    {
                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                            <a class="page-link" asp-action="Index" asp-route-page="@i">@i</a>
                        </li>
                    }

                    @if (Model.HasNext)
                    {
                        <li class="page-item">
                            <a class="page-link" asp-action="Index" asp-route-page="@(Model.CurrentPage + 1)">Next</a>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    </div>
</div>
